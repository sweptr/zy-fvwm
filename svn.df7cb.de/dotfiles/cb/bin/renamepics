#!/usr/bin/perl -w
# cb 001124
# $Id$

use strict;

my %opts;
use Getopt::Std;
getopts('cl:o:', \%opts);

my $tmp = "renamepics-$$.jpg";
my $xv = 0;
my $offset = $opts{'o'} || 0;
my $fmt = sprintf "%%0%ii", $opts{'l'} || 2; # %02i
my ($nr, $file, $new, %WORDS);

$SIG{INT} = \&cleanup;
$SIG{TERM} = \&cleanup;

# Readline support
use Term::ReadLine;
my $term = new Term::ReadLine "$0";
my $attribs = $term->Attribs;
$attribs->{catch_signals} = 0;
$attribs->{completion_entry_function} = $attribs->{list_completion_function};
$attribs->{completion_word} = [];

sub feed_completion {
	foreach my $w (split / /, shift) {
		$WORDS{$w} = 1;
	}
	$attribs->{completion_word} = [keys %WORDS];
}

# spawn xv
sub spawn {
	if (defined ($xv = fork)) {
		unless ($xv) {
			exec ("xv", qw/-geometry +0+0 -ceg +0-0 -cge -0+0 -cma/, $tmp);
			die "Couldn't open xv!";
		}
	} else {
		die "Could not fork xv: $!";
	}
}

# fixup some insanities
chmod 0644, @ARGV;

#foreach (grep /JPG$/, @ARGV) {
#	system "mv '$_' '\L$_'";
#}

my $count = scalar(@ARGV);
print "$count pictures ";

# rename each file
for(my $i = 0; $i < $count; $i++) {
	my $file = $ARGV[$i];
	unless($file =~ /(\d+)-?(.*)\.jpg$/i) {
		print "error: $file contains no number.\n";
		next;
	}
	my ($number, $old) = ($1, $2);
	$old =~ s/_/ /g;

	unlink "$tmp";
	symlink $file, $tmp;
	kill "QUIT", $xv if $xv;
	spawn() unless $xv;

	$nr = sprintf $fmt, $number + $offset;
	printf "Enter new name for $file: (# delete < > rotate ! back)\n";
	$new = $term->readline("$nr-", $old);
	chomp ($new);
	$new =~ s/\s+$//;

	if ($new =~ /^!/) {
		$i -= 2;
		next;
	}
	if ($new =~ /^#/) {
		print "File $file will be deleted.\n";
		unlink $file;
		next;
	}
	if ($new =~ /^([<>])(.*)/) {
		$new = $2;
		my ($atime, $mtime) = (stat $file)[8, 9];
		system "convert -verbose -rotate -90 $file $file" if $1 eq "<";
		system "convert -verbose -rotate  90 $file $file" if $1 eq ">";
		utime $atime, $mtime, $file;
	} elsif($opts{c}) { # send all files to convert (default: only for rotation)
		my ($atime, $mtime) = (stat $file)[8, 9];
		system "convert -verbose $file $file";
		utime $atime, $mtime, $file;
	}
	if ($new) {
		feed_completion($new);
		$new = "$nr-$new.jpg";
	} else {
		$new = "$nr.jpg";
	}

	$new =~ s/ /_/g;
	rename $file, $new if $file ne $new;
	$ARGV[$i] = $new;
}

# clean up
sub cleanup {
	$SIG{INT} = 'DEFAULT';
	$SIG{TERM} = 'DEFAULT';
	$term->free_line_state();
	$term->cleanup_after_signal();
	unlink $tmp;
	kill "TERM", $xv;
	exit 0;
}

END {
	cleanup();
}
